{
  "wire inject": {
    "prefix": "wi",
    "body": "//go:build wireinject\n// +build wireinject\n",
    "description": "Add wireinject tag"
  },
  "if error": {
    "prefix": "iferr",
    "body": ["if err != nil {", "    ${1:return nil, err}", "}"],
    "description": "Checks if err then return nil, err"
  },
  "litter import": {
    "prefix": "lit",
    "body": ["import \"github.com/sanity-io/litter\"],
    "description": "Import litter package for testing purposes"
  },
  "Go Test Module Template": {
    "prefix": "tm",
    "body": [
      "import \"testing\"",
      "",
      "type testModule struct{}",
      "",
      "func newTestModule(t *testing.T) *testModule {",
      "    return &testModule{}",
      "}",
      "",
      "type testCase struct {",
      "    name     string",
      "    args     []any",
      "    mockFn   func()",
      "    assertFn func()",
      "}"
    ],
    "description": "Template for a Go test module and test case structure"
  },
  "Go Test Function Template": {
    "prefix": "tf",
    "body": [
      "func action() (any, error) {",
      "    return nil, nil",
      "}",
      "",
      "func TestAction(t *testing.T) {",
      "    t.Parallel()",
      "",
      "    var m *testModule",
      "    var res any",
      "    var err error",
      "",
      "    tests := []testCase{",
      "        {",
      "            name: \"Test 1\",",
      "            args: []any{},",
      "            mockFn: func() {",
      "                // Mock function implementation",
      "            },",
      "            assertFn: func() {",
      "                // Add assertions here",
      "            },",
      "        },",
      "    }",
      "",
      "    for _, tc := range tests {",
      "        t.Run(tc.name, func(tt *testing.T) {",
      "            m = newTestModule(tt)",
      "            if tc.mockFn != nil {",
      "                tc.mockFn()",
      "            }",
      "            res, err = action()",
      "            if tc.assertFn != nil {",
      "                tc.assertFn()",
      "            }",
      "        })",
      "    }",
      "}"
    ],
    "description": "Template for a Go test function using testModule and testCase"
  }
}
